{
  "version": 3,
  "sources": ["../../../../node_modules/markmap-lib/dist/index.no-plugins.mjs"],
  "sourcesContent": ["import { Hook, UrlBuilder } from \"markmap-common\";\nimport { buildTree } from \"markmap-html-parser\";\nimport MarkdownIt from \"markdown-it\";\nimport md_ins from \"markdown-it-ins\";\nimport md_mark from \"markdown-it-mark\";\nimport md_sub from \"markdown-it-sub\";\nimport md_sup from \"markdown-it-sup\";\nfunction initializeMarkdownIt() {\n  const md = MarkdownIt({\n    html: true,\n    breaks: true\n  });\n  md.use(md_ins).use(md_mark).use(md_sub).use(md_sup);\n  return md;\n}\nfunction createTransformHooks(transformer) {\n  return {\n    transformer,\n    parser: new Hook(),\n    beforeParse: new Hook(),\n    afterParse: new Hook(),\n    retransform: new Hook()\n  };\n}\nfunction patchJSItem(urlBuilder, item) {\n  if (item.type === \"script\" && item.data.src) {\n    return {\n      ...item,\n      data: {\n        ...item.data,\n        src: urlBuilder.getFullUrl(item.data.src)\n      }\n    };\n  }\n  return item;\n}\nfunction patchCSSItem(urlBuilder, item) {\n  if (item.type === \"stylesheet\" && item.data.href) {\n    return {\n      ...item,\n      data: {\n        ...item.data,\n        href: urlBuilder.getFullUrl(item.data.href)\n      }\n    };\n  }\n  return item;\n}\nconst builtInPlugins = [];\nfunction cleanNode(node) {\n  while (!node.content && node.children.length === 1) {\n    node = node.children[0];\n  }\n  while (node.children.length === 1 && !node.children[0].content) {\n    node = {\n      ...node,\n      children: node.children[0].children\n    };\n  }\n  return {\n    ...node,\n    children: node.children.map(cleanNode)\n  };\n}\nclass Transformer {\n  constructor(plugins = builtInPlugins) {\n    this.assetsMap = {};\n    this.urlBuilder = new UrlBuilder();\n    this.hooks = createTransformHooks(this);\n    this.plugins = plugins.map(\n      (plugin) => typeof plugin === \"function\" ? plugin() : plugin\n    );\n    const assetsMap = {};\n    for (const { name, transform } of this.plugins) {\n      assetsMap[name] = transform(this.hooks);\n    }\n    this.assetsMap = assetsMap;\n    const md = initializeMarkdownIt();\n    this.md = md;\n    this.hooks.parser.call(md);\n  }\n  transform(content, fallbackParserOptions) {\n    var _a;\n    const context = {\n      content,\n      features: {},\n      parserOptions: fallbackParserOptions\n    };\n    this.hooks.beforeParse.call(this.md, context);\n    let { content: rawContent } = context;\n    if (context.frontmatterInfo)\n      rawContent = rawContent.slice(context.frontmatterInfo.offset);\n    const html = this.md.render(rawContent, {});\n    this.hooks.afterParse.call(this.md, context);\n    const root = cleanNode(buildTree(html, context.parserOptions));\n    root.content || (root.content = `${((_a = context.frontmatter) == null ? void 0 : _a.title) || \"\"}`);\n    return { ...context, root };\n  }\n  resolveJS(item) {\n    return patchJSItem(this.urlBuilder, item);\n  }\n  resolveCSS(item) {\n    return patchCSSItem(this.urlBuilder, item);\n  }\n  /**\n   * Get all assets from enabled plugins or filter them by plugin names as keys.\n   */\n  getAssets(keys) {\n    const styles = [];\n    const scripts = [];\n    keys ?? (keys = this.plugins.map((plugin) => plugin.name));\n    for (const assets of keys.map((key) => this.assetsMap[key])) {\n      if (assets) {\n        if (assets.styles) styles.push(...assets.styles);\n        if (assets.scripts) scripts.push(...assets.scripts);\n      }\n    }\n    return {\n      styles: styles.map((item) => this.resolveCSS(item)),\n      scripts: scripts.map((item) => this.resolveJS(item))\n    };\n  }\n  /**\n   * Get used assets by features object returned by `transform`.\n   */\n  getUsedAssets(features) {\n    const keys = this.plugins.map((plugin) => plugin.name).filter((name) => features[name]);\n    return this.getAssets(keys);\n  }\n}\nconst transformerVersions = {\n  \"markmap-lib\": \"0.18.12\"\n};\nexport {\n  Transformer,\n  builtInPlugins,\n  patchCSSItem,\n  patchJSItem,\n  transformerVersions\n};\n"],
  "mappings": "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",
  "names": ["ins_plugin"]
}
